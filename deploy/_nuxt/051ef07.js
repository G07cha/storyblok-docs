(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{169:function(e,t,n){"use strict";n(50),n(116);var r=n(171),o=n.n(r),l=n(172),h=n.n(l);n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184);o.a.setOptions({highlight:function(code,e){return h.a.highlight(code,h.a.languages[e],e)}});var c=o.a,d={data:function(){return{bases:["https://api.storyblok.com/v1","https://mapi.storyblok.com/v1","https://api.storyblok.com/v2"]}},props:{url:String,requestObject:Object,httpMethod:String,keepToken:Boolean},methods:{output:function(e){var code="```"+e+"\n";return code+=this.request,c(code+="\n```")}},computed:{path:function(){for(var e=this.url,t=0,n=this.bases.length;t<n;t++){var base=this.bases[t];e=e.replace(base,"")}return this.url.indexOf("?")<=0?e.substring(e.indexOf("/")+1,e.length):e.substring(e.indexOf("/")+1,e.indexOf("?"))},queryParams:function(){if(this.url.indexOf("?")<=0)return{};for(var e,t=this.url.substring(this.url.indexOf("?")+1),n=/([^&=]+)=?([^&]*)/g,r=/\+/g,o=function(e){return decodeURIComponent(e.replace(r," "))},l={},h=n.exec(t);h;){var c=o(h[1]),d=o(h[2]);"[]"===c.substring(c.length-2)?c=c.substring(0,c.length-2)(l[c]||(l[c]=[])).push(d):l[c]="true"===(e=d)||"false"!==e&&("null"===e?null:+e==+e?+e:e),h=n.exec(t)}var R=function(e,t,n){for(var r=t.length-1,i=0;i<r;++i){var o=t[i];o in e||(e[o]={}),e=e[o]}e[t[r]]=n};for(var T in l){var f=T.split("[");f.length>1&&function(){var e=[];f.forEach((function(t){var n=t.replace(/[?[\]\\ ]/g,"");e.push(n)})),R(l,e,l[T]),delete l[T]}()}return this.keepToken||delete l.token,l},urlWithoutParams:function(){return this.url.indexOf("?")<=0?this.url:this.url.substring(0,this.url.indexOf("?"))},request:function(){return"".concat(this.path)}}},R=n(12),component=Object(R.a)(d,undefined,undefined,!1,null,null,null);t.a=component.exports},262:function(e,t,n){"use strict";n.r(t);var r={mixins:[n(169).a],computed:{request:function(){switch(this.httpMethod){case"POST":return'import Foundation\n\nlet headers = [\n  "Content-Type": "application/json",\n  "Authorization": "YOUR_OAUTH_TOKEN"\n]\n\nlet postData = NSData(data: '.concat(JSON.stringify(JSON.stringify(this.requestObject)),'.data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: "').concat(this.url,'")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()');case"PUT":return'import Foundation\n\nlet headers = [\n  "Content-Type": "application/json",\n  "Authorization": "YOUR_OAUTH_TOKEN"\n]\n\nlet postData = NSData(data: '.concat(JSON.stringify(JSON.stringify(this.requestObject)),'.data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: "').concat(this.url,'")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "PUT"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()');case"DELETE":return'import Foundation\n\nlet headers = [\n  "Content-Type": "application/json",\n  "Authorization": "YOUR_OAUTH_TOKEN"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "'.concat(this.url,'")! as URL,\n                    cachePolicy: .useProtocolCachePolicy, timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()');case"GETOAUTH":return'import Foundation\n\nlet headers = [\n  "Content-Type": "application/json",\n  "Authorization": "YOUR_OAUTH_TOKEN"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "'.concat(this.url,'")! as URL,\n                    cachePolicy: .useProtocolCachePolicy, timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()');default:return'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "'.concat(this.url,'")! as URL,\n                    cachePolicy: .useProtocolCachePolicy, timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()')}}}},o=n(12),component=Object(o.a)(r,(function(){var e=this,t=e.$createElement;return(e._self._c||t)("div",{domProps:{innerHTML:e._s(e.output("swift"))}})}),[],!1,null,null,null);t.default=component.exports}}]);